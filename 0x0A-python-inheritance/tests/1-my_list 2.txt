# 1-my_list.txt
# saadsgh123 <sdsghouri@gmail.com>

=======================
how to use 1-my_list.py
=======================

This module define a class that inherits from ``list`` class.

Instantiation
=============

`MyList`` can be instantiated with no arguments, which will return
an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> print(type(my_list))
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

    case 2:
::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

     case 3: non-iterable object.
::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

    case 4: using strings.
::

    >>> my_list = MyList("None")
    >>> print(my_list)
    ['N', 'o', 'n', 'e']

    case 5: A ``TypeError`` will be raised for any more than one instantiation arguments.
::

    >>> my_list = MyList([1, 2, 3], [1, 2])
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

    case 6: if the list has different types.
::
    >>> my_list = MyList([1, 2, "saad"])
    >>> print(my_list)
    [1, 2, 'saad']

USAGE
=====

``MyList`` is an inherited ``list`` class, and thus features the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

    case 1: Replacing an element with index.

::

    >>> my_list[2] = 5
    >>> print(my_list)
    [1, 2, 5]

    case 2: if the index is out of range
::

    >>> my_list = MyList([1, 2, "saad"])
    >>> my_list[3] = 4
    Traceback (most recent call last):
    IndexError: list assignment index out of range

    case 3: removing a value from the list.
::

    >>> my_list.remove(2)
    >>> print(my_list)
    [1, 'saad']

    case 4: remove non-existing value from the list.
::

    >>> my_list.remove(2)
    Traceback (most recent call last):
    ValueError: list.remove(x): x not in list

    case 4: sorting the list.
::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Note that lists of strings are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

::

    >>> my_list.print_sorted()
    ['Betty', 'Brennan', 'Holberton', 'Poppy', 'School']

Another friendly reminder that the original list is unaltered :)

::

    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

Nothing to sort with empty lists.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'